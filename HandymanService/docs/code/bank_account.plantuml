@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class BankAccount {
  + getId(): String
  + hashCode(): int
  + setPaymentSystem(PaymentSystem): void
  + getUser(): User
  + getCardId(): String
  + getPaymentSystem(): PaymentSystem
  + getBank(): String
  + setId(String): void
  + setBank(String): void
  + builder(): BankAccountBuilder
  + setUser(User): void
  + setCardId(String): void
  + equals(Object): boolean
}
class BankAccountController {
  + findAll(): List<BankAccount>
  + save(BankAccountCreateDto): BankAccount
  + getById(String): BankAccount
  + delete(String): void
  + update(BankAccountUpdateDto): BankAccount
}
class BankAccountCreateDto {
  + getCardId(): String
  + getPaymentSystem(): PaymentSystem
  + getBank(): String
  + setCardId(String): void
  + setPaymentSystem(PaymentSystem): void
  + setBank(String): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
interface BankAccountCustomRepository << interface >> {
  + findAllBanks(): List<String>
}
class BankAccountCustomRepositoryImpl {
  + findAllBanks(): List<String>
}
class BankAccountMapper {
  + dtoToAccount(BankAccountCreateDto): BankAccount
  + updateAccount(BankAccount, BankAccountUpdateDto): BankAccount
}
interface BankAccountRepository << interface >>
class BankAccountService {
  + getById(String): BankAccount
  + update(BankAccountUpdateDto): BankAccount
  + findById(String): Optional<BankAccount>
  + findAllBanks(): List<String>
  + findAll(): List<BankAccount>
  + updateBankAccountsUser(List<String>, User): List<BankAccount>
  + delete(String): void
  + save(BankAccountCreateDto): BankAccount
}
class BankAccountUpdateDto {
  + setId(String): void
  + getId(): String
  + toString(): String
  + getCardId(): String
  + getPaymentSystem(): PaymentSystem
  + getBank(): String
  + setCardId(String): void
  + setPaymentSystem(PaymentSystem): void
  + setBank(String): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
class BankServiceGrpcImpl {
  + findAll(Empty, StreamObserver<BankResponse>): void
  - createResponse(String): BankResponse
}
enum PaymentSystem << enumeration >> {
  + valueOf(String): PaymentSystem
  + values(): PaymentSystem[]
}

BankAccount                     "1" *-[#595959,plain]-> "paymentSystem\n1" PaymentSystem                   
BankAccountController           "1" *-[#595959,plain]-> "bankAccountService\n1" BankAccountService              
BankAccountCreateDto            "1" *-[#595959,plain]-> "paymentSystem\n1" PaymentSystem                   
BankAccountCustomRepositoryImpl  -[#008200,dashed]-^  BankAccountCustomRepository     
BankAccountRepository            -[#008200,plain]-^  BankAccountCustomRepository     
BankAccountService              "1" *-[#595959,plain]-> "bankAccountMapper\n1" BankAccountMapper               
BankAccountService              "1" *-[#595959,plain]-> "bankAccountRepository\n1" BankAccountRepository           
BankAccountUpdateDto            "1" *-[#595959,plain]-> "paymentSystem\n1" PaymentSystem                   
BankServiceGrpcImpl             "1" *-[#595959,plain]-> "bankAccountService\n1" BankAccountService              
@enduml
