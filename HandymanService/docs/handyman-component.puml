@startuml Component
!include <C4/C4_Component>

!include <office/Servers/database_server>
!include <office/Servers/application_server>

AddContainerTag("webApp", $sprite="application_server", $legendText="web app container")
AddContainerTag("db", $sprite="database_server", $legendText="database container")

/'Services containers'/
Container(handyman_service, "HandymanService", "Container: Java and SpringBoot", "Бэк для клиентской части, обслуживающий людей которые предоставляют сервис.", $tags="webApp")
Container(landscape_service, "LandscapeService", "Container: Java and SpringBoot", "Управление пользователями, назначение на работы, управление ценой за работы, проставление рейтинга, сбор статистики", $tags="webApp")

/'Create databases containers'/
ContainerDb(postgres, "Database", "Container: Postgis:15.5", "Хранит пользователей, банковские аккаунты" ,$tags="db")
ContainerDb(mongo, "Database", "Container: MongoDB", "Хранит работников", $tags="db")

/'Create Handyman Service boundary'/
Container_Boundary(handyman, "HandymanService") {
    Component(bank_account_controller, "BankAccountController", "Component: Spring RestController", "Предоставляет CRUD операции для работы с банковскими аккаунтами")
    Component(bank_account_service, "BankAccountService", "Component: Spring Service", "Реализует логику работы с банковским аккаунтами")
    Component(bank_account_grpc_service, "BankAccountGrpcService", "Component: GrpcService", "Представляет доступ к статистике банковских аккаунтов")
    Component(user_controller, "UserController", "Component: Spring RestController", "Предоставляет CRUD операции для работы с пользователями")
    Component(user_service, "UserService", "Component: Spring Service", "Реализует логику работы с пользователями")
    Component(worker_controller, "WorkerController", "Component: Spring RestController", "Предоставляет CRUD операции для работы работниками")
    Component(worker_service, "WorkerService", "Component: Spring Service", "Реализует логику работы с работниками")
}

/'Create relations between service and controllers'/
Rel(handyman_service, bank_account_controller, "CRUD операции для банковских аккаунтов.", "json/http")
Rel(handyman_service, user_controller, "CRUD операции для пользователей.", "json/http")
Rel(handyman_service, worker_controller, "CRUD операции для работников.", "json/http")

/'Create relations between controllers and services'/
Rel(bank_account_controller, bank_account_service, " ")
Rel(user_controller, user_service, " ")
Rel(worker_controller, worker_service, " ")

/'Create relations between grpc services and services'/
Rel(bank_account_grpc_service, bank_account_service, " ")

/'Create relations between services and databases'/
Rel(bank_account_service, postgres, "Пишет/Читает банковские аккаунты.", "SQL/JDBC")
Rel(user_service, postgres, "Пишет/Читает пользователей", "SQL/JDBC")
Rel(worker_service, mongo, "Пишет/Читает работников.", "MongoDB wire protocol")

/'Create relations between grpc client and grpc service'/
Rel(landscape_service, bank_account_grpc_service, "Собирает статистику по банковским аккаунтам.", "protocol buffer/grpc")
Rel(worker_service, landscape_service, "Создает новый аккаунт для работника.", "json/http")

/'Show legend'/
SHOW_LEGEND()

@enduml
